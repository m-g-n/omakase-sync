name: Create Release

on:
  push:
    branches:
      - main

# グローバル環境変数を設定
env:
  ZIP_FILENAME: 'omakase-sync.zip' # リリース用ZIPファイル名

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # リリース作成に必要

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      # omakase-sync.php からバージョン番号を抽出
      - name: バージョン番号抽出
        id: get_version
        run: |
          VERSION=$(grep -E "^Version:\s*[0-9]+\.[0-9]+\.[0-9]+" omakase-sync.php | head -1 | sed -E 's/Version:\s*//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # バージョン比較。既存リリースより小さい場合はスキップ
      - name: バージョン比較
        id: version_check
        run: |
          # 最新リリースタグ取得
          LATEST_TAG=$(gh release view --json tagName -q .tagName || echo "0.0.0")
          echo "最新リリースタグ: $LATEST_TAG"
          echo "今回のバージョン: $VERSION"
          # 比較
          if [ "$(printf '%s\n' "$LATEST_TAG" "$VERSION" | sort -V | tail -n1)" != "$VERSION" ]; then
            echo "バージョンが既存リリース以下のためスキップ"
            echo "skip_release=true" >> $GITHUB_ENV
          else
            echo "skip_release=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # release作成
      - name: Create Release
        if: env.skip_release != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      # release用のzip作成
      - name: Zip Release
        uses: TheDoctor0/zip-release@0.4.1
        with:
          filename: ${{ env.ZIP_FILENAME }}
          exclusions: '*.git* /*node_modules/* .editorconfig /*src/*scss/*'
          directory: '.'
          path: '.'
          type: 'zip'

      # releaseにzipファイルを添付
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ZIP_FILENAME }}
          asset_name: ${{ env.ZIP_FILENAME }}
          asset_content_type: application/zip

  update-json:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success' && env.skip_release != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version and package url
        id: set_vars
        run: |
          VERSION_NO_V=${{ needs.build.outputs.version }}
          ZIP_URL="https://github.com/${{ github.repository }}/releases/download/${{ needs.build.outputs.version }}/${{ env.ZIP_FILENAME }}"
          echo "version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "package=$ZIP_URL" >> $GITHUB_OUTPUT

      - name: Generate update.json
        run: |
          echo "{\"version\": \"${{ steps.set_vars.outputs.version }}\", \"package\": \"${{ steps.set_vars.outputs.package }}\", \"url\": \"https://github.com/${{ github.repository }}\"}" > update.json

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy update.json to gh-pages
        run: |
          cp update.json gh-pages/update.json

      - name: Commit and push update.json
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update.json
          git commit -m "Update update.json [skip ci]" || echo "No changes to commit"
          git pull --rebase
          git push
